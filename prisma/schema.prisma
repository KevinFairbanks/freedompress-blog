// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Blog Models
model Post {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  content     String
  excerpt     String?
  published   Boolean  @default(false)
  featured    Boolean  @default(false)
  views       Int      @default(0)
  likes       Int      @default(0)
  
  // SEO
  metaTitle       String?
  metaDescription String?
  metaKeywords    String?
  
  // Media
  featuredImage   String?
  featuredImageAlt String?
  
  // Publishing
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  authorId    String
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  categories  PostCategory[]
  tags        PostTag[]
  comments    Comment[]
  
  @@map("posts")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  color       String?
  
  // SEO
  metaTitle       String?
  metaDescription String?
  
  // Media
  image    String?
  imageAlt String?
  
  // Hierarchy
  parentId String?
  parent   Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  posts PostCategory[]
  
  @@map("categories")
}

model Tag {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  color       String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  posts PostTag[]
  
  @@map("tags")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  approved  Boolean  @default(false)
  
  // User info (for guest comments)
  authorName  String?
  authorEmail String?
  authorUrl   String?
  
  // Reply system
  parentId String?
  parent   Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentReplies")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@map("comments")
}

// Junction Tables
model PostCategory {
  postId     String
  categoryId String
  
  post     Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  @@id([postId, categoryId])
  @@map("post_categories")
}

model PostTag {
  postId String
  tagId  String
  
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@id([postId, tagId])
  @@map("post_tags")
}

// User model (extends core User)
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  bio           String?
  
  // Blog-specific fields
  displayName   String?
  website       String?
  socialLinks   Json?
  
  // Permissions
  role          String    @default("user")
  canPublish    Boolean   @default(false)
  canModerate   Boolean   @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  posts    Post[]
  comments Comment[]
  accounts Account[]
  sessions Session[]
  
  @@map("users")
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}